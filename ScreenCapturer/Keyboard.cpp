#include "Keyboard.h"
#include "Utilities.h"

///  --Globals--  ///
HHOOK KeyboardHook;
HANDLE keyboardListenerThread = nullptr;
bool CtrlPressed = false, AltPressed = false;

///
// Processes keyboard messages
// 
// Params:
//   nCode   - A hook procedure used to determine how to process the message
//   wParam  - Virtual key code of key generated by keystroke message
//   lParam  - Additional message information
// 
// Return:
//   Returns the result of the message processed
///
LRESULT CALLBACK KeyboardHookProc(int nCode, WPARAM wParam, LPARAM lParam)
{
	KBDLLHOOKSTRUCT keyboard;

	if(nCode == HC_ACTION){
		switch(wParam)
		{
		case WM_KEYDOWN: // Key down
		case WM_SYSKEYDOWN: // Key down
			keyboard = *((KBDLLHOOKSTRUCT*)lParam);

			if(keyboard.vkCode == VK_LCONTROL || keyboard.vkCode == VK_RCONTROL || keyboard.vkCode == VK_CONTROL){ // Ctrl
				if(CtrlNeeded){
					CtrlPressed = true;
				}
			}
			else if(keyboard.vkCode == VK_LMENU || keyboard.vkCode == VK_RMENU || keyboard.vkCode == VK_MENU){ // Alt
				if(AltNeeded){
					AltPressed = true;
				}
			}
			else if(keyboard.vkCode == (DWORD)UserKey[0]){ // Key
				if(( !CtrlNeeded && !AltNeeded) // Just key
				     || (CtrlNeeded && CtrlPressed && !AltNeeded) // Ctrl + key
				     || (AltNeeded && AltPressed && !CtrlNeeded) // Alt + key
				     || (AltNeeded && AltPressed && CtrlNeeded && CtrlPressed) ){ // Ctrl + Alt + key
					takeSS();
				}
			}
			break;
		case WM_KEYUP: // Key released
		case WM_SYSKEYUP: // Key released
			keyboard = *((KBDLLHOOKSTRUCT*)lParam);
			if(keyboard.vkCode == VK_LCONTROL || keyboard.vkCode == VK_RCONTROL || keyboard.vkCode == VK_CONTROL){ // Ctrl
				CtrlPressed = false;
			}
			else if(keyboard.vkCode == VK_LMENU || keyboard.vkCode == VK_RMENU || keyboard.vkCode == VK_MENU){ // Alt
				AltPressed = false;
			}
			break;
		}
	}

	return CallNextHookEx(KeyboardHook, nCode, wParam, lParam);
}

///
// Creates a keyboard hook and listens and processes keyboard messages.
// 
// Params:
//   lpParameter  - Unused
// 
// Return:
//   Returns the result of the last message processed
///
DWORD WINAPI keyboardListener(__in LPVOID lpParameter)
{
	UNREFERENCED_PARAMETER(lpParameter);

	MSG message;
	HINSTANCE instance = GetModuleHandle(nullptr);

	// Get keyboard low level hook
	KeyboardHook = SetWindowsHookExW(WH_KEYBOARD_LL, KeyboardHookProc, instance, 0);
	if(!KeyboardHook){
		MessageBoxW(nullptr, L"Failed to set hook.", ERROR_MESSAGE, MB_OK | MB_ICONERROR);
		return ERROR_FUNCTION_FAILED;
	}

	// Process messages
	while(GetMessageW(&message, nullptr, 0, 0)){
		TranslateMessage(&message);
		DispatchMessageW(&message);
	}

	return (DWORD)message.wParam;
}